Seeing a monolith where there is a multi-embedded service, that also have one connectivity edge as a graph problem this would seem rather troublesome. A multi-embedded service is in theory two stand-alone services, and having a single OP connected to this service we have no idea what one of these two services it should be connected to. So when we are disembedding one of the embeddings, we have no idea what IP it should be connected to as it could be either one. The way we are trying to handle this, is by letting the developer choose after the slicing. The OP for the connectivity edge will be changed from e.g., "localhost:5000" -> "[Service1 | Service2]:5000". The developer can then choose what one the service should connect to. But in theory this program isn't a valid program in the first hand, as the OP would've connected to the first initialized service. 
